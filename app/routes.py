import os
from flask import Blueprint, render_template, request, jsonify
from werkzeug.utils import secure_filename
from .analyzers.js_analyzer import JavaScriptAnalyzer
from .analyzers.python_analyzer import PythonAnalyzer
from .analyzers.terraform_analyzer import TerraformAnalyzer
from .analyzers.yaml_analyzer import YamlAnalyzer
from .analyzers.json_analyzer import JsonAnalyzer  # Import the JsonAnalyzer

bp = Blueprint('main', __name__)

@bp.route('/')
def index():
    return render_template('index.html')

@bp.route('/analyze', methods=['POST'])
def analyze_code():
    # Check if the file part is in the request
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    
    file = request.files['file']
    
    # Check if a file was selected
    if file.filename == '':
        return jsonify({'error': 'No selected file'})

    # Get file extension and determine the language
    _, file_extension = os.path.splitext(file.filename)
    file_extension = file_extension.lstrip('.')  # Remove leading dot

    if file_extension == 'py':
        language = 'python'
    elif file_extension in ['js', 'jsx']:
        language = 'javascript'
    elif file_extension == 'tf':
        language = 'terraform'
    elif file_extension in ['yaml', 'yml']:
        language = 'yaml'
    elif file_extension in ['json']:
        language = 'json'
    else:
        return jsonify({'error': 'Unsupported file type'})

    # Read file content and decode it
    file_content = file.read().decode('utf-8')
    
    # Initialize the appropriate analyzer based on the file type
    if language == 'python':
        analyzer = PythonAnalyzer(file_content)
    elif language == 'javascript':
        analyzer = JavaScriptAnalyzer(file_content)
    elif language == 'terraform':
        analyzer = TerraformAnalyzer(file_content)
    elif language == 'yaml':
        analyzer = YamlAnalyzer(file_content)
    elif language == 'json':
        analyzer = JsonAnalyzer(file_content)
    else:
        return jsonify({'error': 'Invalid language'})

    # Perform analysis
    analysis_result = analyzer.analyze()
    
    # Return analysis results as JSON
    return jsonify(analysis_result)