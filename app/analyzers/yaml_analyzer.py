import re
import yaml

class BaseAnalyzer:
    SEVERITY_WEIGHTS = {
        "critical": 20,
        "high": 10,
        "medium": 5,
        "low": 2
    }

    def calculate_score(self, issues):
        base_score = 100
        total_penalty = sum([self.SEVERITY_WEIGHTS[issue["severity"]] for issue in issues])
        total_penalty = min(total_penalty, base_score)  # Cap the penalty to the base score
        return max(0, base_score - total_penalty)

class YamlAnalyzer(BaseAnalyzer):
    def __init__(self, content):
        self.content = content
        self.yaml_data = yaml.safe_load(content)

    def analyze(self):
        issues = []
        detections = set()  # To keep track of detected issues and avoid duplicates

        issues.extend(self.check_hardcoded_secrets(detections))
        issues.extend(self.check_hardcoded_ips(detections))

        # Sort issues by line number
        issues.sort(key=lambda x: x["line"])

        score = self.calculate_score(issues)
        return {"score": score, "issues": issues}

    def add_issue_if_new(self, issues, detections, line, message, fix, severity):
        detection_key = (line, message)
        if detection_key not in detections:
            issues.append({
                "line": line,
                "message": message,
                "fix": fix,
                "severity": severity
            })
            detections.add(detection_key)

    def get_line_number(self, key, value):
        """ This function is used to find the line number of a given key-value pair in the YAML content. """
        lines = self.content.split('\n')
        value_pattern = re.escape(str(value))
        for i, line in enumerate(lines, start=1):
            if re.search(rf'\b{re.escape(key)}\b.*\b{value_pattern}\b', line):
                return i
        return -1

    def check_hardcoded_secrets(self, detections):
        issues = []
        secret_patterns = re.compile(r'(?i)[\'"]?(AKIA[0-9A-Z]{16}|[a-z0-9]{10,})[\'"]?')

        def scan_dict(d, parent_key=""):
            for key, value in d.items():
                composite_key = f"{parent_key}.{key}" if parent_key else key
                if isinstance(value, dict):
                    scan_dict(value, composite_key)
                elif isinstance(value, list):
                    scan_list(value, composite_key)
                elif isinstance(value, str) and secret_patterns.search(value):
                    line_num = self.get_line_number(key, value)
                    if line_num != -1:
                        self.add_issue_if_new(
                            issues, detections, line_num,
                            "Possible hardcoded secret found",
                            "Store secrets in environment variables or configuration files.",
                            "high"
                        )
        
        def scan_list(l, parent_key=""):
            for item in l:
                if isinstance(item, dict):
                    scan_dict(item, parent_key)
                elif isinstance(item, list):
                    scan_list(item, parent_key)
        
        scan_dict(self.yaml_data)
        return issues

    def check_hardcoded_ips(self, detections):
        issues = []
        ip_pattern = re.compile(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')

        def scan_dict(d, parent_key=""):
            for key, value in d.items():
                composite_key = f"{parent_key}.{key}" if parent_key else key
                if isinstance(value, dict):
                    scan_dict(value, composite_key)
                elif isinstance(value, list):
                    scan_list(value, composite_key)
                elif isinstance(value, str) and ip_pattern.search(value):
                    line_num = self.get_line_number(key, value)
                    if line_num != -1:
                        self.add_issue_if_new(
                            issues, detections, line_num,
                            "Hardcoded IP address found",
                            "Avoid hardcoding IP addresses or configure them through environment variables.",
                            "medium"
                        )

        def scan_list(l, parent_key=""):
            for item in l:
                if isinstance(item, dict):
                    scan_dict(item, parent_key)
                elif isinstance(item, list):
                    scan_list(item, parent_key)

        scan_dict(self.yaml_data)
        return issues